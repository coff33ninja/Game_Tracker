[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "http.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.client",
        "description": "http.client",
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "DistilBertTokenizer",
        "importPath": "transformers.models.distilbert",
        "description": "transformers.models.distilbert",
        "isExtraImport": true,
        "detail": "transformers.models.distilbert",
        "documentation": {}
    },
    {
        "label": "DistilBertForSequenceClassification",
        "importPath": "transformers.models.distilbert",
        "description": "transformers.models.distilbert",
        "isExtraImport": true,
        "detail": "transformers.models.distilbert",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers.pipelines",
        "description": "transformers.pipelines",
        "isExtraImport": true,
        "detail": "transformers.pipelines",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "transformers.trainer",
        "description": "transformers.trainer",
        "isExtraImport": true,
        "detail": "transformers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainingArguments",
        "importPath": "transformers.training_args",
        "description": "transformers.training_args",
        "isExtraImport": true,
        "detail": "transformers.training_args",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "importPath": "datasets",
        "description": "datasets",
        "isExtraImport": true,
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "AIModule",
        "importPath": "ai_module",
        "description": "ai_module",
        "isExtraImport": true,
        "detail": "ai_module",
        "documentation": {}
    },
    {
        "label": "AIModule",
        "importPath": "ai_module",
        "description": "ai_module",
        "isExtraImport": true,
        "detail": "ai_module",
        "documentation": {}
    },
    {
        "label": "AIModule",
        "importPath": "ai_module",
        "description": "ai_module",
        "isExtraImport": true,
        "detail": "ai_module",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "db_manager",
        "description": "db_manager",
        "isExtraImport": true,
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "simpledialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttkbootstrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Notebook",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "OwnedGames",
        "importPath": "owned_games",
        "description": "owned_games",
        "isExtraImport": true,
        "detail": "owned_games",
        "documentation": {}
    },
    {
        "label": "OwnedGames",
        "importPath": "owned_games",
        "description": "owned_games",
        "isExtraImport": true,
        "detail": "owned_games",
        "documentation": {}
    },
    {
        "label": "GameFilter",
        "importPath": "game_filter",
        "description": "game_filter",
        "isExtraImport": true,
        "detail": "game_filter",
        "documentation": {}
    },
    {
        "label": "GameFilter",
        "importPath": "game_filter",
        "description": "game_filter",
        "isExtraImport": true,
        "detail": "game_filter",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "importPath": "notifications",
        "description": "notifications",
        "isExtraImport": true,
        "detail": "notifications",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "importPath": "notifications",
        "description": "notifications",
        "isExtraImport": true,
        "detail": "notifications",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "importPath": "notifications",
        "description": "notifications",
        "isExtraImport": true,
        "detail": "notifications",
        "documentation": {}
    },
    {
        "label": "LibraryImport",
        "importPath": "library_import",
        "description": "library_import",
        "isExtraImport": true,
        "detail": "library_import",
        "documentation": {}
    },
    {
        "label": "LibraryImport",
        "importPath": "library_import",
        "description": "library_import",
        "isExtraImport": true,
        "detail": "library_import",
        "documentation": {}
    },
    {
        "label": "PriceTracker",
        "importPath": "price_tracker",
        "description": "price_tracker",
        "isExtraImport": true,
        "detail": "price_tracker",
        "documentation": {}
    },
    {
        "label": "PriceTracker",
        "importPath": "price_tracker",
        "description": "price_tracker",
        "isExtraImport": true,
        "detail": "price_tracker",
        "documentation": {}
    },
    {
        "label": "AIRecommendations",
        "importPath": "ai_recommendations",
        "description": "ai_recommendations",
        "isExtraImport": true,
        "detail": "ai_recommendations",
        "documentation": {}
    },
    {
        "label": "AIRecommendations",
        "importPath": "ai_recommendations",
        "description": "ai_recommendations",
        "isExtraImport": true,
        "detail": "ai_recommendations",
        "documentation": {}
    },
    {
        "label": "ExportBackup",
        "importPath": "export_backup",
        "description": "export_backup",
        "isExtraImport": true,
        "detail": "export_backup",
        "documentation": {}
    },
    {
        "label": "ExportBackup",
        "importPath": "export_backup",
        "description": "export_backup",
        "isExtraImport": true,
        "detail": "export_backup",
        "documentation": {}
    },
    {
        "label": "CloudSync",
        "importPath": "cloud_sync",
        "description": "cloud_sync",
        "isExtraImport": true,
        "detail": "cloud_sync",
        "documentation": {}
    },
    {
        "label": "CloudSync",
        "importPath": "cloud_sync",
        "description": "cloud_sync",
        "isExtraImport": true,
        "detail": "cloud_sync",
        "documentation": {}
    },
    {
        "label": "GenreTagging",
        "importPath": "genre_tagging",
        "description": "genre_tagging",
        "isExtraImport": true,
        "detail": "genre_tagging",
        "documentation": {}
    },
    {
        "label": "GenreTagging",
        "importPath": "genre_tagging",
        "description": "genre_tagging",
        "isExtraImport": true,
        "detail": "genre_tagging",
        "documentation": {}
    },
    {
        "label": "MultiLanguage",
        "importPath": "multi_language",
        "description": "multi_language",
        "isExtraImport": true,
        "detail": "multi_language",
        "documentation": {}
    },
    {
        "label": "MultiLanguage",
        "importPath": "multi_language",
        "description": "multi_language",
        "isExtraImport": true,
        "detail": "multi_language",
        "documentation": {}
    },
    {
        "label": "Analytics",
        "importPath": "analytics",
        "description": "analytics",
        "isExtraImport": true,
        "detail": "analytics",
        "documentation": {}
    },
    {
        "label": "Analytics",
        "importPath": "analytics",
        "description": "analytics",
        "isExtraImport": true,
        "detail": "analytics",
        "documentation": {}
    },
    {
        "label": "FreeGame",
        "importPath": "scraper",
        "description": "scraper",
        "isExtraImport": true,
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "GameScraper",
        "importPath": "scraper",
        "description": "scraper",
        "isExtraImport": true,
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "HtmlFrame",
        "importPath": "tkinterweb.htmlwidgets",
        "description": "tkinterweb.htmlwidgets",
        "isExtraImport": true,
        "detail": "tkinterweb.htmlwidgets",
        "documentation": {}
    },
    {
        "label": "scrape_epic_games",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_amazon_prime",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_gog",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_steam_non_free",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_ubisoft",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_itch_io",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_indiegala",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_humble_bundle",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "scrape_x_posts",
        "importPath": "generate_dataset",
        "description": "generate_dataset",
        "isExtraImport": true,
        "detail": "generate_dataset",
        "documentation": {}
    },
    {
        "label": "generate_chart_config",
        "importPath": "stats_chart",
        "description": "stats_chart",
        "isExtraImport": true,
        "detail": "stats_chart",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "FreeGamesGUI",
        "importPath": "gui",
        "description": "gui",
        "isExtraImport": true,
        "detail": "gui",
        "documentation": {}
    },
    {
        "label": "notification",
        "importPath": "plyer",
        "description": "plyer",
        "isExtraImport": true,
        "detail": "plyer",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.jp",
        "description": ".venv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": ".venv.Scripts.jp",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.50000-games-collection",
        "description": "Rapidapi-tests.50000-games-collection",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"50000-games-collection.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"50000-games-collection.p.rapidapi.com\", }\nconn.request( \"GET\", \"/rapidapi/video_game_reviews/get_game.php?page_no=1&genre=Adventure&age_group=Teens&platform=PC&publisher=Epic%20Games&developer=Game%20Freak&release_year=2015&multiplayer=Yes&game_mode=Online\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.50000-games-collection",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.50000-games-collection",
        "description": "Rapidapi-tests.50000-games-collection",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"50000-games-collection.p.rapidapi.com\", }\nconn.request( \"GET\", \"/rapidapi/video_game_reviews/get_game.php?page_no=1&genre=Adventure&age_group=Teens&platform=PC&publisher=Epic%20Games&developer=Game%20Freak&release_year=2015&multiplayer=Yes&game_mode=Online\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.50000-games-collection",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.50000-games-collection",
        "description": "Rapidapi-tests.50000-games-collection",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.50000-games-collection",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.all-games-search-db",
        "description": "Rapidapi-tests.all-games-search-db",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"all-games-search-db.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"all-games-search-db.p.rapidapi.com\", }\nconn.request( \"GET\", \"/search/suggest?l=english&use_store_query=1&use_search_spellcheck=1&search_creators_and_tags=1&realm=1&term=gta&cc=IN&excluded_content_descriptors=%5B%0A%20%203%2C%0A%20%204%0A%5D&f=games&v=28442543\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.all-games-search-db",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.all-games-search-db",
        "description": "Rapidapi-tests.all-games-search-db",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"all-games-search-db.p.rapidapi.com\", }\nconn.request( \"GET\", \"/search/suggest?l=english&use_store_query=1&use_search_spellcheck=1&search_creators_and_tags=1&realm=1&term=gta&cc=IN&excluded_content_descriptors=%5B%0A%20%203%2C%0A%20%204%0A%5D&f=games&v=28442543\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.all-games-search-db",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.all-games-search-db",
        "description": "Rapidapi-tests.all-games-search-db",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.all-games-search-db",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-games-store-free-games",
        "description": "Rapidapi-tests.epic-games-store-free-games",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"epic-games-store-free-games.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"epic-games-store-free-games.p.rapidapi.com\", }\nconn.request(\"GET\", \"/free?country=US\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-games-store-free-games",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-games-store-free-games",
        "description": "Rapidapi-tests.epic-games-store-free-games",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"epic-games-store-free-games.p.rapidapi.com\", }\nconn.request(\"GET\", \"/free?country=US\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-games-store-free-games",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-games-store-free-games",
        "description": "Rapidapi-tests.epic-games-store-free-games",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-games-store-free-games",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-store-games",
        "description": "Rapidapi-tests.epic-store-games",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"epic-store-games.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"epic-store-games.p.rapidapi.com\", }\nconn.request( \"GET\", \"/comingSoon?searchWords=Assasin&categories=All&locale=us&country=us\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-store-games",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-store-games",
        "description": "Rapidapi-tests.epic-store-games",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"epic-store-games.p.rapidapi.com\", }\nconn.request( \"GET\", \"/comingSoon?searchWords=Assasin&categories=All&locale=us&country=us\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-store-games",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.epic-store-games",
        "description": "Rapidapi-tests.epic-store-games",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.epic-store-games",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-epic-games",
        "description": "Rapidapi-tests.free-epic-games",
        "peekOfCode": "url = \"https://free-epic-games.p.rapidapi.com/free\"\nheaders = {\n    \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\",\n    \"x-rapidapi-host\": \"free-epic-games.p.rapidapi.com\",\n}\nresponse = requests.get(url, headers=headers)\nprint(response.json())",
        "detail": "Rapidapi-tests.free-epic-games",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-epic-games",
        "description": "Rapidapi-tests.free-epic-games",
        "peekOfCode": "headers = {\n    \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\",\n    \"x-rapidapi-host\": \"free-epic-games.p.rapidapi.com\",\n}\nresponse = requests.get(url, headers=headers)\nprint(response.json())",
        "detail": "Rapidapi-tests.free-epic-games",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-epic-games",
        "description": "Rapidapi-tests.free-epic-games",
        "peekOfCode": "response = requests.get(url, headers=headers)\nprint(response.json())",
        "detail": "Rapidapi-tests.free-epic-games",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-to-play-games-database",
        "description": "Rapidapi-tests.free-to-play-games-database",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"free-to-play-games-database.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"free-to-play-games-database.p.rapidapi.com\", }\nconn.request(\"GET\", \"/api/games\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.free-to-play-games-database",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-to-play-games-database",
        "description": "Rapidapi-tests.free-to-play-games-database",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"free-to-play-games-database.p.rapidapi.com\", }\nconn.request(\"GET\", \"/api/games\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.free-to-play-games-database",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.free-to-play-games-database",
        "description": "Rapidapi-tests.free-to-play-games-database",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.free-to-play-games-database",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.gamerpower",
        "description": "Rapidapi-tests.gamerpower",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"gamerpower.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"gamerpower.p.rapidapi.com\", }\nconn.request( \"GET\", \"/api/filter?platform=epic-games-store.steam.android&type=game.loot\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.gamerpower",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.gamerpower",
        "description": "Rapidapi-tests.gamerpower",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"gamerpower.p.rapidapi.com\", }\nconn.request( \"GET\", \"/api/filter?platform=epic-games-store.steam.android&type=game.loot\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.gamerpower",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.gamerpower",
        "description": "Rapidapi-tests.gamerpower",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.gamerpower",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-api7",
        "description": "Rapidapi-tests.steam-api7",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"steam-api7.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"steam-api7.p.rapidapi.com\", }\nconn.request( \"GET\", \"/appDetails/requirements/271590?plainText=true&platform=all&type=all&lang=english\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-api7",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-api7",
        "description": "Rapidapi-tests.steam-api7",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"steam-api7.p.rapidapi.com\", }\nconn.request( \"GET\", \"/appDetails/requirements/271590?plainText=true&platform=all&type=all&lang=english\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-api7",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-api7",
        "description": "Rapidapi-tests.steam-api7",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-api7",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-game-search-and-details",
        "description": "Rapidapi-tests.steam-game-search-and-details",
        "peekOfCode": "conn = http.client.HTTPSConnection(\"steam-game-search-and-details.p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"steam-game-search-and-details.p.rapidapi.com\", }\nconn.request( \"GET\", \"/game_details/search_like/game_id/?search_value=1547890%20\", headers=headers )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-game-search-and-details",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-game-search-and-details",
        "description": "Rapidapi-tests.steam-game-search-and-details",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"steam-game-search-and-details.p.rapidapi.com\", }\nconn.request( \"GET\", \"/game_details/search_like/game_id/?search_value=1547890%20\", headers=headers )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-game-search-and-details",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.steam-game-search-and-details",
        "description": "Rapidapi-tests.steam-game-search-and-details",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.steam-game-search-and-details",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-news",
        "description": "Rapidapi-tests.video-game-news",
        "peekOfCode": "conn = http.client.HTTPSConnection(\".p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"video-game-news.p.rapidapi.com\", }\nconn.request(\"GET\", \"/all\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-news",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-news",
        "description": "Rapidapi-tests.video-game-news",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"video-game-news.p.rapidapi.com\", }\nconn.request(\"GET\", \"/all\", headers=headers)\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-news",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-news",
        "description": "Rapidapi-tests.video-game-news",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-news",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-price",
        "description": "Rapidapi-tests.video-game-price",
        "peekOfCode": "conn = http.client.HTTPSConnection(\".p.rapidapi.com\")\nheaders = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"video-game-price.p.rapidapi.com\", }\nconn.request( \"GET\", \"/game?full_name=Super%20Mario%20Bros&name_contains=Mario&console_name=NES&region=NTSC\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-price",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-price",
        "description": "Rapidapi-tests.video-game-price",
        "peekOfCode": "headers = { \"x-rapidapi-key\": \"24cf6fe557msha7843d66020cd4fp14f0c0jsnb142b98926a9\", \"x-rapidapi-host\": \"video-game-price.p.rapidapi.com\", }\nconn.request( \"GET\", \"/game?full_name=Super%20Mario%20Bros&name_contains=Mario&console_name=NES&region=NTSC\", headers=headers, )\nres = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-price",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Rapidapi-tests.video-game-price",
        "description": "Rapidapi-tests.video-game-price",
        "peekOfCode": "res = conn.getresponse() data = res.read()\nprint(data.decode(\"utf-8\"))",
        "detail": "Rapidapi-tests.video-game-price",
        "documentation": {}
    },
    {
        "label": "AIModule",
        "kind": 6,
        "importPath": "ai_module",
        "description": "ai_module",
        "peekOfCode": "class AIModule:\n    def __init__(self, model_path=\"distilbert-free-games\"):\n        self.tokenizer = DistilBertTokenizer.from_pretrained(\"distilbert-base-uncased\")\n        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        print(f\"Device set to use {self.device}\")\n        # Check if a fine-tuned model exists\n        config_path = os.path.join(model_path, \"config.json\")\n        model_weights_path = os.path.join(model_path, \"pytorch_model.bin\")\n        if os.path.exists(model_path) and os.path.exists(config_path) and os.path.exists(model_weights_path):\n            self.model = DistilBertForSequenceClassification.from_pretrained(model_path)",
        "detail": "ai_module",
        "documentation": {}
    },
    {
        "label": "AIRecommendations",
        "kind": 6,
        "importPath": "ai_recommendations",
        "description": "ai_recommendations",
        "peekOfCode": "class AIRecommendations:\n    def __init__(self, ai_module: AIModule, db_manager: DBManager):\n        self.ai = ai_module\n        self.db = db_manager\n    def get_game_embeddings(self, titles):\n        embeddings = []\n        for title in titles:\n            # Use the new get_embedding method which directly returns the embedding\n            embedding = self.ai.get_embedding(title)\n            embeddings.append(embedding[0] if embedding is not None and embedding.ndim > 1 else np.zeros(self.ai.model.config.hidden_size)) # embedding is (1, hidden_size)",
        "detail": "ai_recommendations",
        "documentation": {}
    },
    {
        "label": "Analytics",
        "kind": 6,
        "importPath": "analytics",
        "description": "analytics",
        "peekOfCode": "class Analytics:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def get_platform_chart(self):\n        counts = self.db.get_status_counts()\n        platforms = [\"Epic\", \"Amazon Prime\", \"GOG\", \"Steam\", \"Ubisoft\"]\n        data = [\n            len([g for g in self.db.get_games_by_status(\"owned\") if g[0] == p])\n            for p in platforms\n        ]",
        "detail": "analytics",
        "documentation": {}
    },
    {
        "label": "CloudSync",
        "kind": 6,
        "importPath": "cloud_sync",
        "description": "cloud_sync",
        "peekOfCode": "class CloudSync:\n    def __init__(self, db_manager: DBManager, aws_config):\n        self.db = db_manager\n        # Create a copy of aws_config to avoid modifying the original\n        s3_client_params = aws_config.copy()\n        # Pop 'bucket' as it's not a direct client config, but used in operations\n        self.bucket_name = s3_client_params.pop('bucket', None)\n        if not self.bucket_name:\n            # If you intend CloudSync to always require a bucket,\n            # you might want to raise an error here.",
        "detail": "cloud_sync",
        "documentation": {}
    },
    {
        "label": "CommunitySharing",
        "kind": 6,
        "importPath": "community_sharing",
        "description": "community_sharing",
        "peekOfCode": "class CommunitySharing:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    async def share_to_discord(self, webhook_url):\n        games = self.db.get_games_by_status(\"active\")\n        message = \"\\n\".join(f\"{g[1]} on {g[0]}: {g[2]}\" for g in games)\n        async with aiohttp.ClientSession() as session:\n            await session.post(webhook_url, json={\"content\": message})",
        "detail": "community_sharing",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "kind": 6,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "class DBManager:\n    def __init__(self, db_path=\"free_games.db\"):\n        self.db_path = db_path\n        self.init_db()\n    def init_db(self):\n        conn = sqlite3.connect(self.db_path)\n        conn.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS games (\n                id INTEGER PRIMARY KEY,\n                title TEXT,",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "ExportBackup",
        "kind": 6,
        "importPath": "export_backup",
        "description": "export_backup",
        "peekOfCode": "class ExportBackup:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def export_to_csv(self, filename=\"games_export.csv\"):\n        games = []\n        for status in [\"active\", \"claimed\", \"owned\", \"expired\"]:\n            games.extend([(status, *g) for g in self.db.get_games_by_status(status)])\n        with open(filename, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n            writer = csv.writer(f)\n            writer.writerow([\"Status\", \"Platform\", \"Title\", \"Detail\", \"Price\", \"Genre\"])",
        "detail": "export_backup",
        "documentation": {}
    },
    {
        "label": "GameFilter",
        "kind": 6,
        "importPath": "game_filter",
        "description": "game_filter",
        "peekOfCode": "class GameFilter:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def filter_games(self, status: str, platform: Optional[str] = None, genre: Optional[str] = None, search_term: Optional[str] = None) -> List[Tuple[Optional[str], Optional[str], Optional[str]]]:\n        query = f\"SELECT platform, title, {'end_date' if status == 'active' else 'claim_date' if status == 'claimed' else 'epitaph' if status == 'expired' else 'acquisition_date'} FROM games WHERE status = ?\"\n        params = [status]\n        if platform:\n            query += \" AND platform = ?\"\n            params.append(platform)\n        if genre:",
        "detail": "game_filter",
        "documentation": {}
    },
    {
        "label": "GenreTagging",
        "kind": 6,
        "importPath": "genre_tagging",
        "description": "genre_tagging",
        "peekOfCode": "class GenreTagging:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def tag_game(self, title, description):\n        # The AIModule's parse_text method no longer extracts genres.\n        # It's now focused on \"is_free\" classification and providing embeddings.\n        # Genre tagging would require a different approach:\n        # 1. A dedicated multi-label classification model trained on game descriptions and genres.\n        # 2. Keyword extraction from the description.\n        # 3. Using an external API that provides genre information.",
        "detail": "genre_tagging",
        "documentation": {}
    },
    {
        "label": "FreeGamesGUI",
        "kind": 6,
        "importPath": "gui",
        "description": "gui",
        "peekOfCode": "class FreeGamesGUI:\n    def __init__(\n        self,\n        root,\n        db_manager: DBManager,\n        owned_games: OwnedGames,\n        game_filter: GameFilter,\n        notifications: Notifications,\n        library_import: LibraryImport,\n        price_tracker: PriceTracker,",
        "detail": "gui",
        "documentation": {}
    },
    {
        "label": "LabelingTool",
        "kind": 6,
        "importPath": "labeling_tool",
        "description": "labeling_tool",
        "peekOfCode": "class LabelingTool:\n    def __init__(self, samples, output_file=\"dataset.jsonl\"):\n        self.samples = samples\n        self.output_file = output_file\n        self.index = 0\n        self.filtered_samples = samples\n        self.platforms = [\n            \"All\",\n            \"Epic\",\n            \"Amazon\",",
        "detail": "labeling_tool",
        "documentation": {}
    },
    {
        "label": "LibraryImport",
        "kind": 6,
        "importPath": "library_import",
        "description": "library_import",
        "peekOfCode": "class LibraryImport:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    async def import_steam_library(self, steam_id, api_key):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                f\"https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key={api_key}&steamid={steam_id}&include_appinfo=1\"\n            ) as resp:\n                data = await resp.json()\n                for game in data[\"response\"].get(\"games\", []):",
        "detail": "library_import",
        "documentation": {}
    },
    {
        "label": "schedule_scraping",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def schedule_scraping(scraper, gui, multi_language):\n    # The new _execute_full_refresh_cycle in gui handles all scraping and processing\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(\n        lambda: asyncio.run(gui._execute_full_refresh_cycle()), \"cron\", day_of_week=\"mon-sun\", hour=8\n    )\n    scheduler.add_job(\n        lambda: asyncio.run(gui._execute_full_refresh_cycle()),\n        \"cron\",\n        day_of_week=\"tue,thu\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MultiLanguage",
        "kind": 6,
        "importPath": "multi_language",
        "description": "multi_language",
        "peekOfCode": "class MultiLanguage:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    async def scrape_non_english(self, url, platform, locale=\"de\"):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url, headers={\"Accept-Language\": locale}) as resp:\n                if resp.status != 200:\n                    print(f\"Failed to fetch non-English page {url}, status: {resp.status}\")\n                    return\n                html = await resp.text()",
        "detail": "multi_language",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "kind": 6,
        "importPath": "notifications",
        "description": "notifications",
        "peekOfCode": "class Notifications:\n    def __init__(self, db_manager: DBManager, email_config=None):\n        self.db = db_manager\n        # email_config is no longer used\n    def send_desktop_notification(self, title, message):\n        # Windows notification message limit for szTip is 256 WCHARs.\n        # Truncate if longer to prevent ValueError, leaving space for ellipsis.\n        max_len = 250  # Be a bit conservative\n        if len(message) > max_len:\n            message = message[:max_len] + \"...\"",
        "detail": "notifications",
        "documentation": {}
    },
    {
        "label": "OfflineMode",
        "kind": 6,
        "importPath": "offline_mode",
        "description": "offline_mode",
        "peekOfCode": "class OfflineMode:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def cache_games(self, filename=\"games_cache.json\"):\n        games = []\n        for status in [\"active\", \"claimed\", \"owned\", \"expired\"]:\n            games.extend(\n                [\n                    {\"status\": status, \"platform\": g[0], \"title\": g[1], \"detail\": g[2]}\n                    for g in self.db.get_games_by_status(status)",
        "detail": "offline_mode",
        "documentation": {}
    },
    {
        "label": "OwnedGames",
        "kind": 6,
        "importPath": "owned_games",
        "description": "owned_games",
        "peekOfCode": "class OwnedGames:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    def add_owned_game(self, title, platform, url=\"\", acquisition_date=None):\n        self.db.mark_game_owned(title, platform, url, acquisition_date)\n    def get_owned_games(self):\n        return self.db.get_games_by_status(\"owned\")",
        "detail": "owned_games",
        "documentation": {}
    },
    {
        "label": "Playtime",
        "kind": 6,
        "importPath": "playtime",
        "description": "playtime",
        "peekOfCode": "class Playtime:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    async def get_steam_playtime(self, steam_id, api_key):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                f\"https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key={api_key}&steamid={steam_id}\"\n            ) as resp:\n                data = await resp.json()\n                for game in data[\"response\"].get(\"games\", []):",
        "detail": "playtime",
        "documentation": {}
    },
    {
        "label": "PriceTracker",
        "kind": 6,
        "importPath": "price_tracker",
        "description": "price_tracker",
        "peekOfCode": "class PriceTracker:\n    def __init__(self, db_manager: DBManager):\n        self.db = db_manager\n    async def get_game_price(self, title, platform):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                f\"https://isthereanydeal.com/search/?q={title}\"\n            ) as resp:\n                soup = BeautifulSoup(await resp.text(), \"html.parser\")\n                price_elem = soup.select_one(\".price\")",
        "detail": "price_tracker",
        "documentation": {}
    },
    {
        "label": "FreeGame",
        "kind": 6,
        "importPath": "scraper",
        "description": "scraper",
        "peekOfCode": "class FreeGame(BaseModel):\n    title: str\n    platform: str\n    url: str\n    end_date: datetime | None\nclass GameScraper:\n    def __init__(self, ai_module: AIModule = None):\n        self.ai = ai_module\n    async def check_epic_games(self):\n        async with aiohttp.ClientSession() as session:",
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "GameScraper",
        "kind": 6,
        "importPath": "scraper",
        "description": "scraper",
        "peekOfCode": "class GameScraper:\n    def __init__(self, ai_module: AIModule = None):\n        self.ai = ai_module\n    async def check_epic_games(self):\n        async with aiohttp.ClientSession() as session:\n            try:\n                async with session.get(\n                    \"https://store-site-backend-static-ipv4.ak.epicgames.com/freeGamesPromotions?locale=en-US&country=US&allowCountries=US\"\n                ) as resp:\n                    resp.raise_for_status()",
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "load_dataset_stats",
        "kind": 2,
        "importPath": "stats_chart",
        "description": "stats_chart",
        "peekOfCode": "def load_dataset_stats(dataset_file=\"dataset.jsonl\"):\n    stats = defaultdict(lambda: {\"free\": 0, \"non_free\": 0})\n    platforms = [\n        \"Epic\",\n        \"Amazon\",\n        \"GOG\",\n        \"Ubisoft\",\n        \"Itch.io\",\n        \"IndieGala\",\n        \"X\",",
        "detail": "stats_chart",
        "documentation": {}
    },
    {
        "label": "generate_chart_config",
        "kind": 2,
        "importPath": "stats_chart",
        "description": "stats_chart",
        "peekOfCode": "def generate_chart_config(dataset_file=\"dataset.jsonl\"):\n    stats = load_dataset_stats(dataset_file)\n    labels = list(stats.keys())\n    free_data = [stats[p][\"free\"] for p in labels]\n    non_free_data = [stats[p][\"non_free\"] for p in labels]\n    return {\n        \"type\": \"bar\",\n        \"data\": {\n            \"labels\": labels,\n            \"datasets\": [",
        "detail": "stats_chart",
        "documentation": {}
    },
    {
        "label": "Wishlist",
        "kind": 6,
        "importPath": "wishlist",
        "description": "wishlist",
        "peekOfCode": "class Wishlist:\n    def __init__(self, db_manager: DBManager, notifications: Notifications):\n        self.db = db_manager\n        self.notifications = notifications\n    async def check_steam_wishlist(self, steam_id, api_key):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                f\"https://store.steampowered.com/wishlist/profiles/{steam_id}/wishlistdata/\"\n            ) as resp:\n                data = await resp.json()",
        "detail": "wishlist",
        "documentation": {}
    }
]